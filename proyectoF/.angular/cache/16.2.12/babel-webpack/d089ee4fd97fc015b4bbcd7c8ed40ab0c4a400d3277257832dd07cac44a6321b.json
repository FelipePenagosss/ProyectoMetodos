{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"ngx-toastr\";\nimport * as i4 from \"src/app/services/competitor.service\";\nimport * as i5 from \"src/app/services/event.service\";\nimport * as i6 from \"src/app/services/stakes.service\";\nclass CrearStakeComponent {\n  constructor(fb, router, toastr, competitorService, eventService, stakeService, aRouter) {\n    this.fb = fb;\n    this.router = router;\n    this.toastr = toastr;\n    this.competitorService = competitorService;\n    this.eventService = eventService;\n    this.stakeService = stakeService;\n    this.aRouter = aRouter;\n    this.competidores = [];\n    this.eventos = [];\n    this.titulo = 'Crear Participacion';\n    this.stakeForm = this.fb.group({\n      id: ['', Validators.required],\n      position: ['', Validators.required],\n      competitor: ['', Validators.required],\n      event: ['', Validators.required]\n    });\n    this.id = this.aRouter.snapshot.paramMap.get('id');\n  }\n  ngOnInit() {\n    this.obtenerCompetidores();\n    this.obtenerEventos();\n    this.esEditar();\n  }\n  agregarProducto() {\n    const stake = {\n      id: this.stakeForm.get('id')?.value,\n      position: this.stakeForm.get('position')?.value,\n      surName: this.stakeForm.get('surName')?.value,\n      birthdate: this.stakeForm.get('birthdate')?.value\n    };\n    if (this.id !== null) {\n      // Modo de edición\n      this.actualizarCompetitor(competitor);\n    } else {\n      // Modo de creación\n      this.guardarCompetitor(competitor, this.competitorForm.get('discipline')?.value);\n    }\n  }\n  guardarCompetitor(competitor, id) {\n    this.competitorService.saveCompetitor(competitor, id).subscribe(data => {\n      this.toastr.success('El Competidor fue registrado con éxito!', 'Producto Registrado!');\n      this.router.navigate(['/mostrarCompetitor']);\n    }, error => {\n      console.log(error);\n      this.competitorForm.reset();\n    });\n  }\n  actualizarCompetitor(competitor) {\n    this.competitorService.update(this.id, competitor).subscribe(response => {\n      console.log(response);\n      this.toastr.success('El competidor fue actualizada con éxito!', 'Disciplina Actualizada');\n      this.router.navigate(['/mostrarCompetitor']);\n    }, error => {\n      console.log(error);\n      this.competitorForm.reset();\n    });\n  }\n  esEditar() {\n    if (this.id !== null) {\n      this.titulo = 'Editar Competidor';\n      this.competitorService.getCompetitorById(this.id).subscribe(response => {\n        console.log(response);\n        const data = response.data;\n        console.log(data);\n        this.competitorForm.setValue({\n          id: data.id,\n          name: data.name,\n          surName: data.surName,\n          birthdate: data.birthdate,\n          discipline: data.discipline\n        });\n        this.competitorForm.get('id')?.disable();\n        this.competitorForm.get('discipline')?.disable();\n      }, error => {\n        console.log(error);\n      });\n    }\n  }\n  obtenerDisciplinas() {\n    this.disciplinaService.getDiscipline().subscribe(response => {\n      console.log(response);\n      const data = response.data;\n      if (Array.isArray(data)) {\n        this.disciplinas = data;\n        for (const iterator of this.disciplinas) {\n          console.log(iterator.name);\n        }\n      } else {\n        console.error('Los datos recibidos no son un array:', data);\n      }\n    }, error => {\n      console.log(error);\n    });\n  }\n  static #_ = this.ɵfac = function CrearStakeComponent_Factory(t) {\n    return new (t || CrearStakeComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i3.ToastrService), i0.ɵɵdirectiveInject(i4.CompetitorService), i0.ɵɵdirectiveInject(i5.EventService), i0.ɵɵdirectiveInject(i6.StakesService), i0.ɵɵdirectiveInject(i2.ActivatedRoute));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: CrearStakeComponent,\n    selectors: [[\"app-crear-stake\"]],\n    decls: 2,\n    vars: 0,\n    template: function CrearStakeComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"p\");\n        i0.ɵɵtext(1, \"crear-stake works!\");\n        i0.ɵɵelementEnd();\n      }\n    },\n    styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}\nexport { CrearStakeComponent };","map":{"version":3,"names":["Validators","CrearStakeComponent","constructor","fb","router","toastr","competitorService","eventService","stakeService","aRouter","competidores","eventos","titulo","stakeForm","group","id","required","position","competitor","event","snapshot","paramMap","get","ngOnInit","obtenerCompetidores","obtenerEventos","esEditar","agregarProducto","stake","value","surName","birthdate","actualizarCompetitor","guardarCompetitor","competitorForm","saveCompetitor","subscribe","data","success","navigate","error","console","log","reset","update","response","getCompetitorById","setValue","name","discipline","disable","obtenerDisciplinas","disciplinaService","getDiscipline","Array","isArray","disciplinas","iterator","_","i0","ɵɵdirectiveInject","i1","FormBuilder","i2","Router","i3","ToastrService","i4","CompetitorService","i5","EventService","i6","StakesService","ActivatedRoute","_2","selectors","decls","vars","template","CrearStakeComponent_Template","rf","ctx","ɵɵelementStart","ɵɵtext","ɵɵelementEnd"],"sources":["C:\\Users\\nenit\\Documents\\universidad\\Sem5\\Electiva2\\Angular\\proyectoF\\src\\app\\components\\crear-stake\\crear-stake.component.ts","C:\\Users\\nenit\\Documents\\universidad\\Sem5\\Electiva2\\Angular\\proyectoF\\src\\app\\components\\crear-stake\\crear-stake.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { ToastrService } from 'ngx-toastr';\nimport { Competitor} from 'src/app/models/Competitor';\nimport { Event} from 'src/app/models/Event';\nimport {Stake} from 'src/app/models/Stake';\nimport { CompetitorService } from 'src/app/services/competitor.service';\nimport { EventService } from 'src/app/services/event.service';\nimport { StakesService } from 'src/app/services/stakes.service';\n\n\n@Component({\n  selector: 'app-crear-stake',\n  templateUrl: './crear-stake.component.html',\n  styleUrls: ['./crear-stake.component.css']\n})\nexport class CrearStakeComponent {\n  competidores:Competitor[]=[];\n  eventos:Event[]=[];\n  stakeForm: FormGroup;\n  titulo = 'Crear Participacion';\n  id: string | null;\n  constructor(private fb: FormBuilder,\n              private router: Router,\n              private toastr: ToastrService,\n              private competitorService:CompetitorService,\n              private eventService:EventService,\n              private stakeService:StakesService,\n              private aRouter: ActivatedRoute) { \n    this.stakeForm = this.fb.group({\n      id:['',Validators.required],\n      position: ['', Validators.required],\n      competitor: ['', Validators.required],\n      event: ['', Validators.required],\n    })\n    this.id = this.aRouter.snapshot.paramMap.get('id');\n  }\n\n  ngOnInit(): void {\n    this.obtenerCompetidores();\n    this.obtenerEventos();\n    this.esEditar();\n  }\n  agregarProducto() {\n    const stake:Competitor = {\n      id: this.stakeForm.get('id')?.value,\n      position: this.stakeForm.get('position')?.value,\n      surName: this.stakeForm.get('surName')?.value,\n      birthdate: this.stakeForm.get('birthdate')?.value\n    };\n  \n    if (this.id !== null) {\n      // Modo de edición\n      this.actualizarCompetitor(competitor);\n    } else {\n      // Modo de creación\n      this.guardarCompetitor(competitor,this.competitorForm.get('discipline')?.value);\n    }\n  }\n  guardarCompetitor(competitor: Competitor,id:String) {\n    this.competitorService.saveCompetitor(competitor,id).subscribe(\n      data => {\n        this.toastr.success('El Competidor fue registrado con éxito!', 'Producto Registrado!');\n        this.router.navigate(['/mostrarCompetitor']);\n      },\n      error => {\n        console.log(error);\n        this.competitorForm.reset();\n      }\n    );\n  }\n  private actualizarCompetitor(competitor: Competitor) {\n    this.competitorService.update(this.id!, competitor).subscribe(\n      response => {\n        console.log(response);\n        this.toastr.success('El competidor fue actualizada con éxito!', 'Disciplina Actualizada');\n        this.router.navigate(['/mostrarCompetitor']);\n      },\n      error => {\n        console.log(error);\n        this.competitorForm.reset();\n      }\n    );\n  }\n  esEditar() {\n    if (this.id !== null) {\n      this.titulo = 'Editar Competidor';\n      \n      this.competitorService.getCompetitorById(this.id).subscribe(\n        response => {\n          console.log(response);\n          const data = response.data;\n          console.log(data)\n          this.competitorForm.setValue({\n            id:data.id,\n            name: data.name,\n            surName: data.surName,\n            birthdate:data.birthdate,\n            discipline:data.discipline\n          });\n          this.competitorForm.get('id')?.disable();\n          this.competitorForm.get('discipline')?.disable();\n        },\n        error => {\n          console.log(error);\n        });\n    }\n  }\n  obtenerDisciplinas() {\n    this.disciplinaService.getDiscipline().subscribe(\n      response => {\n        console.log(response);\n        const data = response.data;\n        if (Array.isArray(data)) {\n          this.disciplinas = data;\n          for (const iterator of this.disciplinas) {\n            console.log(iterator.name);\n          }\n        } else {\n          console.error('Los datos recibidos no son un array:', data);\n        }\n      },\n      error => {\n        console.log(error);\n      }\n    );\n  }\n \n}\n","<p>crear-stake works!</p>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}